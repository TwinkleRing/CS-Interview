### 컴파일러와 인터프리터

고급언어로 작성된 프로그램들을 컴퓨터가 이해할 수 있는 기계어(Machine Code)로 해석하고 실행하는 데에는 Compile과 Interpret 방식이 있다.
컴파일러는 고급 명령어들을 직접 기계어로 번역한다. 그리고 인터프리터는 고급 명령어들을 중간 형태로 번역한 다음, 그것을 실행한다.


#### 1. 컴파일러
컴파일(Compile)이란 특정 프로그래밍 언어를 Runtime 이전에 기계어로 해석하는 작업 방식이다. 이때 번역되기전 원래의 소스를 원시 코드(Source Code), 바뀐 코드를 오브젝트 코드(Object Code)라 한다.
런타임 이전에 Assembly 언어로 변환하기 때문에 구동 시간이 오래 걸리지만, 구동된 이후는 하나의 패키지로 다시 번역할 필요가 없어 매우 빠른 실행 속도를 가지게 됩니다.
구동시에 코드와 함께 시스템으로부터 메모리를 할당받으며 할당받은 메모리를 사용하게 된다.
런타임 이전에 이미 해석을 마치고 대게 컴파일 결과물이 바로 기계어로 전환되기 때문에 OS 및 빌드 환경에 종속적이다.
그러므로 OS 환경에 맞게 호환되는 라이브러리와 빌드 환경을 구분해서 구축해줘야 한다.
컴파일러를 사용하는 언어에는 C , C++ , 포트란이 있습니다.


#### 2. 인터프리터
인터프리터는 Runtime 이후에 고급 언어로 작성된 Source Code를 한번에 한 줄씩 읽어들여서 실행하는 프로그램이다.
프로그램 코드를 기계어로 바로 바꾸지 않고 중간 단계를 거친 뒤, 런타임에 즉시 해석하기 때문에 바로 Compact한 패키지 형태로 Binary 파일을 뽑아낼 수 있는 
Compiler에 비해 실행시간이 더 느리고 낮은 퍼포먼스를 보이게 된다. 대신에 런타임에 실시간 디버깅 및 코드 수정이 가능하다는 장점이 있다.
프로그램 수정이 간단하다는 장점을 살려서 인터프리터를 적극적으로 도입한 것이 스크립트 언어이다.
많은 프로그래밍 언어들의 인터프리터는 프로그램 해석을 위해 Virtual Machine을 두고, Manchine위에 Interpret를 수행하게 되는데, 
이때 해석의 기반이 되는 Machine들이 OS 환경을 지원해주어서 인터프리터는 OS 및 플랫폼에 종속되지 않는 프로그램 구동이 가능하게 됩니다.
대표적인 사용 예로 Python, Javascript ,Ruby, HTML 이 있습니다.
#### 3. 하이브리드 기법
하이브리드 기법은 컴파일 방식과 인터프리트를 모두 사용하는 방식으로 사용자에 의해 작성된 프로그램 코드가 컴파일러에 의해 중간 코드로 변환되고,
이는 다양한 환경의 시스템에서 인터프리터에 의해 직접 실행된다. 이식성이 뛰어난 장점이 있고 한번 작성된 프로그램은 어떤 시스템 환경에서든지 즉시 실행이 가능합니다.
인터프리트 방식의 단점인 소스 코드가 쉽게 공개되는 점과 컴파일 방식의 단점인 OS 종속성을 해결하였으며 대표적인 사용 예로 JAVA 언어가 있습니다.
